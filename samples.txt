import os
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from dotenv import load_dotenv
import asyncpg

# Load environment variables from .env file
load_dotenv()

# Get the database URL from environment variables
DATABASE_URL = os.getenv("DATABASE_URL")

app = FastAPI()

# Pydantic model for user data
class User(BaseModel):
    username: str
    email: str

@app.on_event("startup")
async def startup():
    # Initialize the database connection pool
    app.state.db_pool = await asyncpg.create_pool(DATABASE_URL)

@app.on_event("shutdown")
async def shutdown():
    # Close the database connection pool
    await app.state.db_pool.close()

# Dependency to get a connection from the pool
async def get_db_connection():
    async with app.state.db_pool.acquire() as conn:
        yield conn

@app.get("/users/")
async def read_users():
    async with app.state.db_pool.acquire() as conn:
        users = await conn.fetch('SELECT * FROM users')
        return [dict(user) for user in users]

@app.post("/users/")
async def create_user(user: User):
    async with app.state.db_pool.acquire() as conn:
        query = 'INSERT INTO users (username, email) VALUES ($1, $2) RETURNING id'
        user_id = await conn.fetchval(query, user.username, user.email)
        return {"message": "User created successfully", "id": user_id}

@app.get("/users/{user_id}")
async def read_user(user_id: int):
    async with app.state.db_pool.acquire() as conn:
        user = await conn.fetchrow('SELECT * FROM users WHERE id = $1', user_id)
        if user is None:
            raise HTTPException(status_code=404, detail="User not found")
        return dict(user)

@app.put("/users/{user_id}")
async def update_user(user_id: int, user: User):
    async with app.state.db_pool.acquire() as conn:
        query = 'UPDATE users SET username = $1, email = $2 WHERE id = $3'
        result = await conn.execute(query, user.username, user.email, user_id)
        if result == 'UPDATE 0':
            raise HTTPException(status_code=404, detail="User not found")
        return {"message": "User updated successfully"}

@app.delete("/users/{user_id}")
async def delete_user(user_id: int):
    async with app.state.db_pool.acquire() as conn:
        query = 'DELETE FROM users WHERE id = $1'
        result = await conn.execute(query, user_id)
        if result == 'DELETE 0':
            raise HTTPException(status_code=404, detail="User not found")
        return {"message": "User deleted successfully"}



----------------------------


from fastapi import FastAPI, Depends
import asyncpg

app = FastAPI()

DATABASE_URL = "postgresql://user:password@localhost/mydatabase"

async def get_db_connection():
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        yield conn
    finally:
        await conn.close()

@app.get("/items/")
async def read_items(conn = Depends(get_db_connection)):
    items = await conn.fetch("SELECT * FROM items")
    return [dict(item) for item in items]


---------------------

from fastapi import FastAPI, Depends

app = FastAPI()

class CommonQueryParams:
    def __init__(self, q: str = None, skip: int = 0, limit: int = 10):
        self.q = q
        self.skip = skip
        self.limit = limit

@app.get("/items/")
async def read_items(commons: CommonQueryParams = Depends()):
    response = {"q": commons.q, "skip": commons.skip, "limit": commons.limit}
    return response


-----------------------


from fastapi import FastAPI, Depends

app = FastAPI()

def get_db():
    db = "db_connection"
    return db

def get_repository(db = Depends(get_db)):
    repo = f"repository using {db}"
    return repo

@app.get("/items/")
async def read_items(repo = Depends(get_repository)):
    return {"repo": repo}



---------------



